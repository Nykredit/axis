/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { AccordionItemVariant } from "./components/accordionItem/accordionItem";
import { AlertVariant } from "./components/alert/alert";
import { AmountAlignment, AmountVariant } from "./components/amount/amount";
import { AssistiveTextVariant } from "./components/assistiveText/assistiveText";
import { BoxVariant } from "./components/box/box";
import { ButtonVariant } from "./components/button/button";
import { NavigationButtonVariant } from "./components/navigationButton/navigationButton";
import { ButtonVariant as ButtonVariant1 } from "./components/button/button";
import { CanvasButtonAlignment, CanvasButtonType, CanvasButtonVariant } from "./components/canvasButton/canvasButton";
import { CardSelectVariant } from "./components/cardSelect/cardSelect";
import { CardSelectVariant as CardSelectVariant1 } from "./components";
import { CardVariant } from "./components/card/card";
import { CheckboxDetailedVariant } from "./components/checkboxDetailed/checkboxDetailed";
import { CheckboxDetailedProps } from "./components/checkboxDetailed/checkboxDetailed";
import { CheckboxDetailedListVariant } from "./components/checkboxDetailedList/checkboxDetailedList";
import { Orientation } from "./utils/propsTypes";
import { FieldBaseVariant } from "./components/fieldBase/fieldBase";
import { FieldBaseVariant as FieldBaseVariant1 } from "./components/fieldBase/fieldBase";
import { HeadingAlignment, HeadingVariant } from "./components/heading/heading";
import { IconSize } from "./components/Icon/icon";
import { ImageVariant } from "./components/image/image";
import { InputBaseState, InputBaseVariant } from "./components/inputBase/inputBase";
import { LabelVariant } from "./components/label/label";
import { Alignment, ParagraphVariant } from "./components/paragraph/paragraph";
import { PillOption } from "./components/pillList/pillList";
import { RadioDetailedVariant } from "./components/radioDetailed/radioDetailed";
import { RadioButtonWithLabelProps } from "./components/radioDetailed/radioDetailed";
import { SelectInputValue } from "./components/selectInputBase/selectInputBase";
import { SelectInputValue as SelectInputValue1 } from "./components/selectInputBase/selectInputBase";
import { Alignment as Alignment1, Justification, StackVariant, Wrap } from "./components/stack/stack";
import { StepProps } from "./components/flowStepperItem";
import { DataDefinitionItemVariant } from "./components/dataDefinitionItem/dataDefinitionItem";
import { TagProps } from "./components/tag";
import { InputElementType } from "./components/textInputBase/textInputBase";
export { AccordionItemVariant } from "./components/accordionItem/accordionItem";
export { AlertVariant } from "./components/alert/alert";
export { AmountAlignment, AmountVariant } from "./components/amount/amount";
export { AssistiveTextVariant } from "./components/assistiveText/assistiveText";
export { BoxVariant } from "./components/box/box";
export { ButtonVariant } from "./components/button/button";
export { NavigationButtonVariant } from "./components/navigationButton/navigationButton";
export { ButtonVariant as ButtonVariant1 } from "./components/button/button";
export { CanvasButtonAlignment, CanvasButtonType, CanvasButtonVariant } from "./components/canvasButton/canvasButton";
export { CardSelectVariant } from "./components/cardSelect/cardSelect";
export { CardSelectVariant as CardSelectVariant1 } from "./components";
export { CardVariant } from "./components/card/card";
export { CheckboxDetailedVariant } from "./components/checkboxDetailed/checkboxDetailed";
export { CheckboxDetailedProps } from "./components/checkboxDetailed/checkboxDetailed";
export { CheckboxDetailedListVariant } from "./components/checkboxDetailedList/checkboxDetailedList";
export { Orientation } from "./utils/propsTypes";
export { FieldBaseVariant } from "./components/fieldBase/fieldBase";
export { FieldBaseVariant as FieldBaseVariant1 } from "./components/fieldBase/fieldBase";
export { HeadingAlignment, HeadingVariant } from "./components/heading/heading";
export { IconSize } from "./components/Icon/icon";
export { ImageVariant } from "./components/image/image";
export { InputBaseState, InputBaseVariant } from "./components/inputBase/inputBase";
export { LabelVariant } from "./components/label/label";
export { Alignment, ParagraphVariant } from "./components/paragraph/paragraph";
export { PillOption } from "./components/pillList/pillList";
export { RadioDetailedVariant } from "./components/radioDetailed/radioDetailed";
export { RadioButtonWithLabelProps } from "./components/radioDetailed/radioDetailed";
export { SelectInputValue } from "./components/selectInputBase/selectInputBase";
export { SelectInputValue as SelectInputValue1 } from "./components/selectInputBase/selectInputBase";
export { Alignment as Alignment1, Justification, StackVariant, Wrap } from "./components/stack/stack";
export { StepProps } from "./components/flowStepperItem";
export { DataDefinitionItemVariant } from "./components/dataDefinitionItem/dataDefinitionItem";
export { TagProps } from "./components/tag";
export { InputElementType } from "./components/textInputBase/textInputBase";
export namespace Components {
    interface NkAccordion {
        "isopen": boolean;
        /**
          * The title of the accordion item
         */
        "text": string;
        /**
          * The variant of the accordion item
         */
        "variant": AccordionItemVariant;
    }
    interface NkAccordionList {
    }
    interface NkAlert {
        /**
          * The text inside the button to the right
         */
        "buttonLabel": string;
        /**
          * The icon displayed to the left
         */
        "icon": string;
        /**
          * The text displayed inside the alert
         */
        "text": string;
        /**
          * description
         */
        "variant": AlertVariant;
    }
    interface NkAmount {
        /**
          * Alignment of the label above
         */
        "alignment": AmountAlignment;
        /**
          * The price that is displayed
         */
        "price": string;
        /**
          * The rate that is displayed next to the price
         */
        "rate": string;
        /**
          * The text for the label above
         */
        "text": string;
        /**
          * Variant of the amount component
         */
        "variant": AmountVariant;
    }
    interface NkAssistiveText {
        /**
          * The label displayed inside of the div
         */
        "label": string;
        /**
          * The variant of the button, such as primary and secondary
         */
        "variant": AssistiveTextVariant;
    }
    interface NkAvatar {
        /**
          * The icon to be shown if no image src is provided or image loading fails
         */
        "iconName": string;
        /**
          * The source/path to the image shown in the avatar
         */
        "src": string;
    }
    interface NkBox {
        /**
          * The elevation variant
         */
        "variant": BoxVariant;
    }
    interface NkButtonIcon {
        /**
          * Is disabled
         */
        "disabled": boolean;
        /**
          * The icon displayed inside of the button
         */
        "icon": string;
        /**
          * The variant of the button, such as primary and secondary
         */
        "variant": ButtonVariant;
    }
    interface NkButtonNav {
        /**
          * Name of the icon to use
         */
        "iconname": string;
        /**
          * Text of the navigation button label
         */
        "label": string;
        /**
          * The variant of the navigation button
         */
        "variant": NavigationButtonVariant;
    }
    interface NkButtonText {
        /**
          * Is this button disabled?
         */
        "disabled"?: boolean;
        /**
          * The label displayed inside of the button and as a tooltip
         */
        "label": string;
        /**
          * icon preceding the label
         */
        "leadingicon": string;
        /**
          * icon following the label
         */
        "trailingicon": string;
        /**
          * The variant of the button, such as primary and secondary
         */
        "variant": ButtonVariant1;
    }
    interface NkCanvasButton {
        /**
          * Controls the horizontal alignment of the nested content
         */
        "alignment": CanvasButtonAlignment;
        /**
          * Determines if the button is disabled
         */
        "disabled": boolean;
        /**
          * Href for the link
         */
        "href": string;
        /**
          * Used to change the look of the canvas button, depending on whether it is active or not
         */
        "isactive": boolean;
        /**
          * The type of the canvas button
         */
        "type": CanvasButtonType;
        /**
          * Variant of the canvas button
         */
        "variant": CanvasButtonVariant;
    }
    interface NkCardSelect {
        /**
          * Label to the action at the bottom of the card
         */
        "actionlabel": string;
        /**
          * Title of the action at the bottom of the card
         */
        "actiontitle": string;
        /**
          * Value of the action
         */
        "actionvalue": boolean;
        /**
          * Unique id of the card
         */
        "cardid": string;
        /**
          * Alt text to the image
         */
        "imagealttext": string;
        /**
          * Url of the image
         */
        "imageurl": string;
        /**
          * Variant of the card select
         */
        "variant": CardSelectVariant;
    }
    interface NkCardSelectMulti {
        /**
          * Label to the action at the bottom of the card
         */
        "actionlabel": string;
        /**
          * Title of the action at the bottom of the card
         */
        "actiontitle": string;
        /**
          * Value of the action
         */
        "actionvalue": boolean;
        /**
          * Unique id of the card
         */
        "cardid": string;
        /**
          * Alt text to the image
         */
        "imagealttext": string;
        /**
          * Url of the image
         */
        "imageurl": string;
        /**
          * Variant of the card select
         */
        "variant": CardSelectVariant1;
    }
    interface NkCardSelectSingle {
        /**
          * Label to the action at the bottom of the card
         */
        "actionlabel": string;
        /**
          * Title of the action at the bottom of the card
         */
        "actiontitle": string;
        /**
          * Value of the action
         */
        "actionvalue": boolean;
        /**
          * Unique id of the card
         */
        "cardid": string;
        /**
          * Alt text to the image
         */
        "imagealttext": string;
        /**
          * Url of the image
         */
        "imageurl": string;
        /**
          * Variant of the card select
         */
        "variant": CardSelectVariant1;
    }
    interface NkCardStandard {
        "imagealttext": string;
        /**
          * The image URL of the card
         */
        "imageurl": string;
        /**
          * The card variant
         */
        "variant": CardVariant;
    }
    interface NkCheckbox {
        /**
          * Is this checkbox disabled?
         */
        "disabled": boolean;
        /**
          * boolean to tell if input should be displayed in DOM or not
         */
        "hideinput": boolean;
        /**
          * The value of the checkbox. True if checked, false if unchecked.
         */
        "value": boolean;
    }
    interface NkCheckboxItem {
        /**
          * Is this checkbox disabled?
         */
        "disabled": boolean;
        /**
          * Boolean to tell if input should be displayed in DOM or not
         */
        "hideinput": boolean;
        /**
          * Label of the checkbox
         */
        "label": string;
        /**
          * The emphasized text above the label
         */
        "titlelabel": string;
        /**
          * The value of the checkbox. True if checked, false if unchecked.
         */
        "value": boolean;
        /**
          * The variant of the checkbox
         */
        "variant": CheckboxDetailedVariant;
    }
    interface NkCheckboxList {
        /**
          * Field label
         */
        "label": string;
        /**
          * available options
         */
        "options": CheckboxDetailedProps[];
        /**
          * Orientation of the checkbox list. Defaults to vertical
         */
        "orientation": Orientation;
        /**
          * selected keys
         */
        "values": string[];
        /**
          * Checkbox variant. Should we show the list as pills or checkboxes?
         */
        "variant": CheckboxDetailedListVariant;
    }
    interface NkDivider {
        "orientation": Orientation;
    }
    interface NkEmailInput {
        /**
          * The label shown above the input field
         */
        "label": string;
        /**
          * Custom label to display under input
         */
        "labelassistive": string | null;
        /**
          * Max length of the input string
         */
        "maxLength": string;
        /**
          * The value of the input
         */
        "value": string;
        /**
          * The variant of the fieldBase element
         */
        "variant": FieldBaseVariant;
        /**
          * Width of the field in 'ch'
         */
        "width": number;
    }
    interface NkFieldBase {
        /**
          * Determines if the label should be raised
         */
        "hasValue": boolean;
        /**
          * The label to render. This should be descriptive of the field
         */
        "label": string;
        /**
          * Assistive label which is placed below the component
         */
        "labelassistive": string;
        /**
          * The variant of the fieldBase element
         */
        "variant": FieldBaseVariant1;
        /**
          * Width of the component in "ch"
         */
        "width": number;
    }
    interface NkHeading {
        /**
          * Text alignment for the header
         */
        "alignment"?: HeadingAlignment;
        /**
          * Header level. Use appropriate level according to the global header outline
         */
        "level": number;
        /**
          * The text to show in the heading
         */
        "text": string;
        /**
          * Determines the header variant
         */
        "variant": HeadingVariant;
    }
    interface NkIconSystem {
        /**
          * The name of the icon, e.g. 'add', 'remove', 'lock'
         */
        "name": string;
        /**
          * The size category of the icon
         */
        "size": IconSize;
        /**
          * Icon variant determining color and size
         */
        "variant": string;
    }
    interface NkImage {
        /**
          * The `alt` text of the image
         */
        "alt": string;
        /**
          * The image URL of the card
         */
        "url": string;
        /**
          * Variant of the image
         */
        "variant": ImageVariant;
    }
    interface NkInputBase {
        /**
          * Determines if the label should be raised
         */
        "hasValue": boolean;
        /**
          * The label to render. This should be descriptive of the field
         */
        "label": string;
        /**
          * Assistive label which is placed below the input box
         */
        "labelassistive": string;
        /**
          * Component state. Useful for signaling errors
         */
        "state": InputBaseState;
        /**
          * The variant of the fieldBase element
         */
        "variant": InputBaseVariant;
        /**
          * Width of the input field in "ch"
         */
        "width": number;
    }
    interface NkLabel {
        /**
          * The text of the label
         */
        "text": string;
        /**
          * The label variant
         */
        "variant": LabelVariant;
    }
    interface NkLayoutSplit {
    }
    interface NkListUnordered {
    }
    interface NkLoader {
        /**
          * How far the loading is
         */
        "percentage": number;
        /**
          * Text displayed below the loading bar
         */
        "text": string;
    }
    interface NkMultiSelectCardList {
        /**
          * selected cards containing their cardid
         */
        "values": string[];
    }
    interface NkNumberInput {
        /**
          * Determines if the text field is read only
         */
        "disabled": boolean;
        /**
          * The label shown above the input field
         */
        "label": string;
        /**
          * Maximum numerical value
         */
        "max": string;
        /**
          * Max length of the input string
         */
        "maxLength": string;
        /**
          * Minimum numerical value
         */
        "min": string;
        /**
          * The value in the input field
         */
        "value": number | null;
        /**
          * The variant of the fieldBase element
         */
        "variant": FieldBaseVariant;
        /**
          * Width of the field in 'ch'
         */
        "width": number;
    }
    interface NkParagraph {
        /**
          * Text alignment for the paragraph
         */
        "alignment": Alignment;
        /**
          * The text to display in the paragraph.
         */
        "text": string;
        /**
          * Allows for direct HTML injection
         */
        "unsafe": boolean;
        /**
          * The paragraph variant
         */
        "variant": ParagraphVariant;
    }
    interface NkPill {
        /**
          * Is this pill disabled?
         */
        "disabled": boolean;
        "icon": string;
        "label": string;
        /**
          * Is checked
         */
        "value": boolean;
    }
    interface NkPillList {
        "options": PillOption[];
        "values": string[];
    }
    interface NkRadio {
        /**
          * Is the radiobutton disabled?
         */
        "disabled": boolean;
        /**
          * Boolean to tell if input should be displayed in DOM or not
         */
        "hideinput": boolean;
        /**
          * Name of the radiobutton
         */
        "name": string;
        /**
          * The value of the radiobutton. True if checked, false in unchecked
         */
        "value": boolean;
    }
    interface NkRadioItem {
        /**
          * The id of the radiobutton
         */
        "buttonid": string;
        /**
          * Determines if the radio button is disabled
         */
        "disabled": boolean;
        /**
          * Boolean to tell if input should be displayed in DOM or not
         */
        "hideinput": boolean;
        /**
          * The label shown next to the radio button
         */
        "label": string;
        /**
          * Name of the radiobutton
         */
        "name": string;
        /**
          * The emphasized text above the label
         */
        "titlelabel": string;
        /**
          * The value of the radio button
         */
        "value": boolean;
        /**
          * The variant of the radiobutton with label component
         */
        "variant": RadioDetailedVariant;
    }
    interface NkRadioList {
        /**
          * The name of the radiobutton group
         */
        "groupname": string;
        /**
          * The label to show above the list of radiobuttons
         */
        "label": string;
        /**
          * Orientation of the radio button list. Defaults to vertical
         */
        "orientation": Orientation;
        "radiobuttons": RadioButtonWithLabelProps[];
        /**
          * The id of the currently chosen radiobutton
         */
        "value": string;
    }
    interface NkSelectInput {
        /**
          * Label to be displayed above the select
         */
        "label": string;
        /**
          * Possible options to select from
         */
        "options": SelectInputValue[];
        /**
          * The selected value. This should match the value of an object in Options
         */
        "value": string | number;
        /**
          * The variant of the fieldBase element
         */
        "variant": FieldBaseVariant;
        /**
          * Width of the field in 'ch'
         */
        "width": number;
    }
    interface NkSelectInputBase {
        /**
          * Allowed values
         */
        "options": SelectInputValue1[];
        /**
          * Value of the select input
         */
        "value": string | null;
    }
    interface NkSingleSelectCardList {
        /**
          * Selected cardid
         */
        "value": string;
    }
    interface NkStack {
        /**
          * Dictates the aligment of the stack
         */
        "alignment": Alignment1;
        /**
          * Dictates justification of the stack items
         */
        "justification": Justification;
        /**
          * Dictates the orientation of the stack
         */
        "orientation": Orientation;
        /**
          * Dictates the spacing and contextual use of the stack
         */
        "variant": StackVariant;
        /**
          * Disable wrap
         */
        "wrap": Wrap;
    }
    interface NkStepperItem {
        /**
          * Icon of the bar
         */
        "icon": string;
        /**
          * If bar is active
         */
        "isactive": boolean;
        /**
          * If bar is completed
         */
        "iscompleted": boolean;
        /**
          * Is it the last item in the steps
         */
        "islastitem": boolean;
        /**
          * Label used for title on bar
         */
        "label": string;
        /**
          * Id of the item
         */
        "stepperId": string;
    }
    interface NkStepperList {
        /**
          * The current step of the steps
         */
        "currentstep": string;
        /**
          * List of steps
         */
        "steps": StepProps[];
    }
    interface NkTableItem {
        /**
          * The label displayed to the left
         */
        "label": string;
        /**
          * The value displayed to the right
         */
        "value": string;
        /**
          * Variant of the item
         */
        "variant": DataDefinitionItemVariant;
    }
    interface NkTableList {
    }
    interface NkTag {
        /**
          * Optional icon name
         */
        "icon": string;
        /**
          * The text that is displayed
         */
        "text": string;
    }
    interface NkTagList {
        /**
          * List of tags
         */
        "tags": TagProps[];
        /**
          * Variant of the tag stack
         */
        "variant": Orientation;
    }
    interface NkTextInput {
        /**
          * Custom error message
         */
        "customerrormessage": string;
        /**
          * Determines if the text field is read only
         */
        "disabled": boolean;
        /**
          * Determines if the text input is used a search input. If true it will show a search icon
         */
        "issearchable": boolean;
        /**
          * The label shown above the input field
         */
        "label": string;
        /**
          * Max length of the input string
         */
        "maxLength": string;
        /**
          * Regex pattern for HTML5 validation
         */
        "pattern": string;
        /**
          * Required
         */
        "required": boolean;
        /**
          * The value of the input field
         */
        "value": string;
        /**
          * The variant of the fieldBase element
         */
        "variant": FieldBaseVariant;
        /**
          * Width of the field in 'ch'
         */
        "width": number;
    }
    interface NkTextInputBase {
        /**
          * Custom error message
         */
        "customerrormessage": string;
        /**
          * Disables input if true.
         */
        "disabled": boolean;
        "inputMode": string;
        /**
          * Maximum value of the input
         */
        "max": string;
        /**
          * Maximum allowed length of the input string
         */
        "maxLength": string;
        /**
          * Minimum value of the input
         */
        "min": string;
        /**
          * Regex pattern for HTML5 validation
         */
        "pattern": string;
        /**
          * Required
         */
        "required": boolean;
        /**
          * The type of the HTMLInputField
         */
        "type": InputElementType;
        /**
          * The value of the input field
         */
        "value": string | Date | null;
    }
    interface NkTextarea {
        /**
          * Disables input if true.
         */
        "disabled": boolean;
        /**
          * Description of this property
         */
        "label": string;
        /**
          * Maximum length of the value string
         */
        "maxLength": string;
        "placeholderText": string;
        /**
          * The text value within the textarea
         */
        "value": string;
        /**
          * The variant of the fieldBase element
         */
        "variant": FieldBaseVariant;
    }
    interface NkTextareaBase {
        /**
          * Disables input if true.
         */
        "disabled": boolean;
        /**
          * Max length of the value string
         */
        "maxLength": string;
        "placeholderText": string;
        /**
          * Text value of the textarea
         */
        "value": string;
    }
    interface NkUnstyledAnchor {
        /**
          * href
         */
        "href": string;
        /**
          * Determine if the anchor is an inline element or block;
         */
        "inline": boolean;
        /**
          * target
         */
        "target": 'blank' | undefined;
    }
    interface NkUnstyledButton {
        "inline": boolean;
    }
}
export interface NkAlertCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNkAlertElement;
}
export interface NkCardSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNkCardSelectElement;
}
export interface NkCardSelectMultiCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNkCardSelectMultiElement;
}
export interface NkCardSelectSingleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNkCardSelectSingleElement;
}
export interface NkCheckboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNkCheckboxElement;
}
export interface NkCheckboxItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNkCheckboxItemElement;
}
export interface NkCheckboxListCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNkCheckboxListElement;
}
export interface NkEmailInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNkEmailInputElement;
}
export interface NkMultiSelectCardListCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNkMultiSelectCardListElement;
}
export interface NkNumberInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNkNumberInputElement;
}
export interface NkPillCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNkPillElement;
}
export interface NkPillListCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNkPillListElement;
}
export interface NkRadioCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNkRadioElement;
}
export interface NkRadioItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNkRadioItemElement;
}
export interface NkRadioListCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNkRadioListElement;
}
export interface NkSelectInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNkSelectInputElement;
}
export interface NkSelectInputBaseCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNkSelectInputBaseElement;
}
export interface NkSingleSelectCardListCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNkSingleSelectCardListElement;
}
export interface NkTextInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNkTextInputElement;
}
export interface NkTextInputBaseCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNkTextInputBaseElement;
}
export interface NkTextareaCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNkTextareaElement;
}
export interface NkTextareaBaseCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNkTextareaBaseElement;
}
declare global {
    interface HTMLNkAccordionElement extends Components.NkAccordion, HTMLStencilElement {
    }
    var HTMLNkAccordionElement: {
        prototype: HTMLNkAccordionElement;
        new (): HTMLNkAccordionElement;
    };
    interface HTMLNkAccordionListElement extends Components.NkAccordionList, HTMLStencilElement {
    }
    var HTMLNkAccordionListElement: {
        prototype: HTMLNkAccordionListElement;
        new (): HTMLNkAccordionListElement;
    };
    interface HTMLNkAlertElementEventMap {
        "buttonClicked": MouseEvent;
    }
    interface HTMLNkAlertElement extends Components.NkAlert, HTMLStencilElement {
        addEventListener<K extends keyof HTMLNkAlertElementEventMap>(type: K, listener: (this: HTMLNkAlertElement, ev: NkAlertCustomEvent<HTMLNkAlertElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLNkAlertElementEventMap>(type: K, listener: (this: HTMLNkAlertElement, ev: NkAlertCustomEvent<HTMLNkAlertElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLNkAlertElement: {
        prototype: HTMLNkAlertElement;
        new (): HTMLNkAlertElement;
    };
    interface HTMLNkAmountElement extends Components.NkAmount, HTMLStencilElement {
    }
    var HTMLNkAmountElement: {
        prototype: HTMLNkAmountElement;
        new (): HTMLNkAmountElement;
    };
    interface HTMLNkAssistiveTextElement extends Components.NkAssistiveText, HTMLStencilElement {
    }
    var HTMLNkAssistiveTextElement: {
        prototype: HTMLNkAssistiveTextElement;
        new (): HTMLNkAssistiveTextElement;
    };
    interface HTMLNkAvatarElement extends Components.NkAvatar, HTMLStencilElement {
    }
    var HTMLNkAvatarElement: {
        prototype: HTMLNkAvatarElement;
        new (): HTMLNkAvatarElement;
    };
    interface HTMLNkBoxElement extends Components.NkBox, HTMLStencilElement {
    }
    var HTMLNkBoxElement: {
        prototype: HTMLNkBoxElement;
        new (): HTMLNkBoxElement;
    };
    interface HTMLNkButtonIconElement extends Components.NkButtonIcon, HTMLStencilElement {
    }
    var HTMLNkButtonIconElement: {
        prototype: HTMLNkButtonIconElement;
        new (): HTMLNkButtonIconElement;
    };
    interface HTMLNkButtonNavElement extends Components.NkButtonNav, HTMLStencilElement {
    }
    var HTMLNkButtonNavElement: {
        prototype: HTMLNkButtonNavElement;
        new (): HTMLNkButtonNavElement;
    };
    interface HTMLNkButtonTextElement extends Components.NkButtonText, HTMLStencilElement {
    }
    var HTMLNkButtonTextElement: {
        prototype: HTMLNkButtonTextElement;
        new (): HTMLNkButtonTextElement;
    };
    interface HTMLNkCanvasButtonElement extends Components.NkCanvasButton, HTMLStencilElement {
    }
    var HTMLNkCanvasButtonElement: {
        prototype: HTMLNkCanvasButtonElement;
        new (): HTMLNkCanvasButtonElement;
    };
    interface HTMLNkCardSelectElementEventMap {
        "cardChanged": boolean;
    }
    interface HTMLNkCardSelectElement extends Components.NkCardSelect, HTMLStencilElement {
        addEventListener<K extends keyof HTMLNkCardSelectElementEventMap>(type: K, listener: (this: HTMLNkCardSelectElement, ev: NkCardSelectCustomEvent<HTMLNkCardSelectElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLNkCardSelectElementEventMap>(type: K, listener: (this: HTMLNkCardSelectElement, ev: NkCardSelectCustomEvent<HTMLNkCardSelectElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLNkCardSelectElement: {
        prototype: HTMLNkCardSelectElement;
        new (): HTMLNkCardSelectElement;
    };
    interface HTMLNkCardSelectMultiElementEventMap {
        "cardChanged": boolean;
    }
    interface HTMLNkCardSelectMultiElement extends Components.NkCardSelectMulti, HTMLStencilElement {
        addEventListener<K extends keyof HTMLNkCardSelectMultiElementEventMap>(type: K, listener: (this: HTMLNkCardSelectMultiElement, ev: NkCardSelectMultiCustomEvent<HTMLNkCardSelectMultiElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLNkCardSelectMultiElementEventMap>(type: K, listener: (this: HTMLNkCardSelectMultiElement, ev: NkCardSelectMultiCustomEvent<HTMLNkCardSelectMultiElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLNkCardSelectMultiElement: {
        prototype: HTMLNkCardSelectMultiElement;
        new (): HTMLNkCardSelectMultiElement;
    };
    interface HTMLNkCardSelectSingleElementEventMap {
        "cardChanged": boolean;
    }
    interface HTMLNkCardSelectSingleElement extends Components.NkCardSelectSingle, HTMLStencilElement {
        addEventListener<K extends keyof HTMLNkCardSelectSingleElementEventMap>(type: K, listener: (this: HTMLNkCardSelectSingleElement, ev: NkCardSelectSingleCustomEvent<HTMLNkCardSelectSingleElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLNkCardSelectSingleElementEventMap>(type: K, listener: (this: HTMLNkCardSelectSingleElement, ev: NkCardSelectSingleCustomEvent<HTMLNkCardSelectSingleElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLNkCardSelectSingleElement: {
        prototype: HTMLNkCardSelectSingleElement;
        new (): HTMLNkCardSelectSingleElement;
    };
    interface HTMLNkCardStandardElement extends Components.NkCardStandard, HTMLStencilElement {
    }
    var HTMLNkCardStandardElement: {
        prototype: HTMLNkCardStandardElement;
        new (): HTMLNkCardStandardElement;
    };
    interface HTMLNkCheckboxElementEventMap {
        "valueChanged": boolean;
    }
    interface HTMLNkCheckboxElement extends Components.NkCheckbox, HTMLStencilElement {
        addEventListener<K extends keyof HTMLNkCheckboxElementEventMap>(type: K, listener: (this: HTMLNkCheckboxElement, ev: NkCheckboxCustomEvent<HTMLNkCheckboxElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLNkCheckboxElementEventMap>(type: K, listener: (this: HTMLNkCheckboxElement, ev: NkCheckboxCustomEvent<HTMLNkCheckboxElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLNkCheckboxElement: {
        prototype: HTMLNkCheckboxElement;
        new (): HTMLNkCheckboxElement;
    };
    interface HTMLNkCheckboxItemElementEventMap {
        "valueChanged": boolean;
    }
    interface HTMLNkCheckboxItemElement extends Components.NkCheckboxItem, HTMLStencilElement {
        addEventListener<K extends keyof HTMLNkCheckboxItemElementEventMap>(type: K, listener: (this: HTMLNkCheckboxItemElement, ev: NkCheckboxItemCustomEvent<HTMLNkCheckboxItemElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLNkCheckboxItemElementEventMap>(type: K, listener: (this: HTMLNkCheckboxItemElement, ev: NkCheckboxItemCustomEvent<HTMLNkCheckboxItemElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLNkCheckboxItemElement: {
        prototype: HTMLNkCheckboxItemElement;
        new (): HTMLNkCheckboxItemElement;
    };
    interface HTMLNkCheckboxListElementEventMap {
        "valuesChanged": string[];
    }
    interface HTMLNkCheckboxListElement extends Components.NkCheckboxList, HTMLStencilElement {
        addEventListener<K extends keyof HTMLNkCheckboxListElementEventMap>(type: K, listener: (this: HTMLNkCheckboxListElement, ev: NkCheckboxListCustomEvent<HTMLNkCheckboxListElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLNkCheckboxListElementEventMap>(type: K, listener: (this: HTMLNkCheckboxListElement, ev: NkCheckboxListCustomEvent<HTMLNkCheckboxListElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLNkCheckboxListElement: {
        prototype: HTMLNkCheckboxListElement;
        new (): HTMLNkCheckboxListElement;
    };
    interface HTMLNkDividerElement extends Components.NkDivider, HTMLStencilElement {
    }
    var HTMLNkDividerElement: {
        prototype: HTMLNkDividerElement;
        new (): HTMLNkDividerElement;
    };
    interface HTMLNkEmailInputElementEventMap {
        "valueChanged": string;
    }
    interface HTMLNkEmailInputElement extends Components.NkEmailInput, HTMLStencilElement {
        addEventListener<K extends keyof HTMLNkEmailInputElementEventMap>(type: K, listener: (this: HTMLNkEmailInputElement, ev: NkEmailInputCustomEvent<HTMLNkEmailInputElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLNkEmailInputElementEventMap>(type: K, listener: (this: HTMLNkEmailInputElement, ev: NkEmailInputCustomEvent<HTMLNkEmailInputElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLNkEmailInputElement: {
        prototype: HTMLNkEmailInputElement;
        new (): HTMLNkEmailInputElement;
    };
    interface HTMLNkFieldBaseElement extends Components.NkFieldBase, HTMLStencilElement {
    }
    var HTMLNkFieldBaseElement: {
        prototype: HTMLNkFieldBaseElement;
        new (): HTMLNkFieldBaseElement;
    };
    interface HTMLNkHeadingElement extends Components.NkHeading, HTMLStencilElement {
    }
    var HTMLNkHeadingElement: {
        prototype: HTMLNkHeadingElement;
        new (): HTMLNkHeadingElement;
    };
    interface HTMLNkIconSystemElement extends Components.NkIconSystem, HTMLStencilElement {
    }
    var HTMLNkIconSystemElement: {
        prototype: HTMLNkIconSystemElement;
        new (): HTMLNkIconSystemElement;
    };
    interface HTMLNkImageElement extends Components.NkImage, HTMLStencilElement {
    }
    var HTMLNkImageElement: {
        prototype: HTMLNkImageElement;
        new (): HTMLNkImageElement;
    };
    interface HTMLNkInputBaseElement extends Components.NkInputBase, HTMLStencilElement {
    }
    var HTMLNkInputBaseElement: {
        prototype: HTMLNkInputBaseElement;
        new (): HTMLNkInputBaseElement;
    };
    interface HTMLNkLabelElement extends Components.NkLabel, HTMLStencilElement {
    }
    var HTMLNkLabelElement: {
        prototype: HTMLNkLabelElement;
        new (): HTMLNkLabelElement;
    };
    interface HTMLNkLayoutSplitElement extends Components.NkLayoutSplit, HTMLStencilElement {
    }
    var HTMLNkLayoutSplitElement: {
        prototype: HTMLNkLayoutSplitElement;
        new (): HTMLNkLayoutSplitElement;
    };
    interface HTMLNkListUnorderedElement extends Components.NkListUnordered, HTMLStencilElement {
    }
    var HTMLNkListUnorderedElement: {
        prototype: HTMLNkListUnorderedElement;
        new (): HTMLNkListUnorderedElement;
    };
    interface HTMLNkLoaderElement extends Components.NkLoader, HTMLStencilElement {
    }
    var HTMLNkLoaderElement: {
        prototype: HTMLNkLoaderElement;
        new (): HTMLNkLoaderElement;
    };
    interface HTMLNkMultiSelectCardListElementEventMap {
        "cardChanged": string[];
    }
    interface HTMLNkMultiSelectCardListElement extends Components.NkMultiSelectCardList, HTMLStencilElement {
        addEventListener<K extends keyof HTMLNkMultiSelectCardListElementEventMap>(type: K, listener: (this: HTMLNkMultiSelectCardListElement, ev: NkMultiSelectCardListCustomEvent<HTMLNkMultiSelectCardListElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLNkMultiSelectCardListElementEventMap>(type: K, listener: (this: HTMLNkMultiSelectCardListElement, ev: NkMultiSelectCardListCustomEvent<HTMLNkMultiSelectCardListElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLNkMultiSelectCardListElement: {
        prototype: HTMLNkMultiSelectCardListElement;
        new (): HTMLNkMultiSelectCardListElement;
    };
    interface HTMLNkNumberInputElementEventMap {
        "valueChanged": number;
    }
    interface HTMLNkNumberInputElement extends Components.NkNumberInput, HTMLStencilElement {
        addEventListener<K extends keyof HTMLNkNumberInputElementEventMap>(type: K, listener: (this: HTMLNkNumberInputElement, ev: NkNumberInputCustomEvent<HTMLNkNumberInputElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLNkNumberInputElementEventMap>(type: K, listener: (this: HTMLNkNumberInputElement, ev: NkNumberInputCustomEvent<HTMLNkNumberInputElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLNkNumberInputElement: {
        prototype: HTMLNkNumberInputElement;
        new (): HTMLNkNumberInputElement;
    };
    interface HTMLNkParagraphElement extends Components.NkParagraph, HTMLStencilElement {
    }
    var HTMLNkParagraphElement: {
        prototype: HTMLNkParagraphElement;
        new (): HTMLNkParagraphElement;
    };
    interface HTMLNkPillElementEventMap {
        "pillChange": boolean;
    }
    interface HTMLNkPillElement extends Components.NkPill, HTMLStencilElement {
        addEventListener<K extends keyof HTMLNkPillElementEventMap>(type: K, listener: (this: HTMLNkPillElement, ev: NkPillCustomEvent<HTMLNkPillElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLNkPillElementEventMap>(type: K, listener: (this: HTMLNkPillElement, ev: NkPillCustomEvent<HTMLNkPillElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLNkPillElement: {
        prototype: HTMLNkPillElement;
        new (): HTMLNkPillElement;
    };
    interface HTMLNkPillListElementEventMap {
        "pillChange": string[];
    }
    interface HTMLNkPillListElement extends Components.NkPillList, HTMLStencilElement {
        addEventListener<K extends keyof HTMLNkPillListElementEventMap>(type: K, listener: (this: HTMLNkPillListElement, ev: NkPillListCustomEvent<HTMLNkPillListElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLNkPillListElementEventMap>(type: K, listener: (this: HTMLNkPillListElement, ev: NkPillListCustomEvent<HTMLNkPillListElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLNkPillListElement: {
        prototype: HTMLNkPillListElement;
        new (): HTMLNkPillListElement;
    };
    interface HTMLNkRadioElementEventMap {
        "valueChanged": boolean;
    }
    interface HTMLNkRadioElement extends Components.NkRadio, HTMLStencilElement {
        addEventListener<K extends keyof HTMLNkRadioElementEventMap>(type: K, listener: (this: HTMLNkRadioElement, ev: NkRadioCustomEvent<HTMLNkRadioElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLNkRadioElementEventMap>(type: K, listener: (this: HTMLNkRadioElement, ev: NkRadioCustomEvent<HTMLNkRadioElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLNkRadioElement: {
        prototype: HTMLNkRadioElement;
        new (): HTMLNkRadioElement;
    };
    interface HTMLNkRadioItemElementEventMap {
        "valueChanged": boolean;
    }
    interface HTMLNkRadioItemElement extends Components.NkRadioItem, HTMLStencilElement {
        addEventListener<K extends keyof HTMLNkRadioItemElementEventMap>(type: K, listener: (this: HTMLNkRadioItemElement, ev: NkRadioItemCustomEvent<HTMLNkRadioItemElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLNkRadioItemElementEventMap>(type: K, listener: (this: HTMLNkRadioItemElement, ev: NkRadioItemCustomEvent<HTMLNkRadioItemElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLNkRadioItemElement: {
        prototype: HTMLNkRadioItemElement;
        new (): HTMLNkRadioItemElement;
    };
    interface HTMLNkRadioListElementEventMap {
        "valueChanged": string;
    }
    interface HTMLNkRadioListElement extends Components.NkRadioList, HTMLStencilElement {
        addEventListener<K extends keyof HTMLNkRadioListElementEventMap>(type: K, listener: (this: HTMLNkRadioListElement, ev: NkRadioListCustomEvent<HTMLNkRadioListElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLNkRadioListElementEventMap>(type: K, listener: (this: HTMLNkRadioListElement, ev: NkRadioListCustomEvent<HTMLNkRadioListElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLNkRadioListElement: {
        prototype: HTMLNkRadioListElement;
        new (): HTMLNkRadioListElement;
    };
    interface HTMLNkSelectInputElementEventMap {
        "valueChanged": string | number;
    }
    interface HTMLNkSelectInputElement extends Components.NkSelectInput, HTMLStencilElement {
        addEventListener<K extends keyof HTMLNkSelectInputElementEventMap>(type: K, listener: (this: HTMLNkSelectInputElement, ev: NkSelectInputCustomEvent<HTMLNkSelectInputElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLNkSelectInputElementEventMap>(type: K, listener: (this: HTMLNkSelectInputElement, ev: NkSelectInputCustomEvent<HTMLNkSelectInputElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLNkSelectInputElement: {
        prototype: HTMLNkSelectInputElement;
        new (): HTMLNkSelectInputElement;
    };
    interface HTMLNkSelectInputBaseElementEventMap {
        "valueChanged": string;
    }
    interface HTMLNkSelectInputBaseElement extends Components.NkSelectInputBase, HTMLStencilElement {
        addEventListener<K extends keyof HTMLNkSelectInputBaseElementEventMap>(type: K, listener: (this: HTMLNkSelectInputBaseElement, ev: NkSelectInputBaseCustomEvent<HTMLNkSelectInputBaseElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLNkSelectInputBaseElementEventMap>(type: K, listener: (this: HTMLNkSelectInputBaseElement, ev: NkSelectInputBaseCustomEvent<HTMLNkSelectInputBaseElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLNkSelectInputBaseElement: {
        prototype: HTMLNkSelectInputBaseElement;
        new (): HTMLNkSelectInputBaseElement;
    };
    interface HTMLNkSingleSelectCardListElementEventMap {
        "cardChanged": string;
    }
    interface HTMLNkSingleSelectCardListElement extends Components.NkSingleSelectCardList, HTMLStencilElement {
        addEventListener<K extends keyof HTMLNkSingleSelectCardListElementEventMap>(type: K, listener: (this: HTMLNkSingleSelectCardListElement, ev: NkSingleSelectCardListCustomEvent<HTMLNkSingleSelectCardListElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLNkSingleSelectCardListElementEventMap>(type: K, listener: (this: HTMLNkSingleSelectCardListElement, ev: NkSingleSelectCardListCustomEvent<HTMLNkSingleSelectCardListElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLNkSingleSelectCardListElement: {
        prototype: HTMLNkSingleSelectCardListElement;
        new (): HTMLNkSingleSelectCardListElement;
    };
    interface HTMLNkStackElement extends Components.NkStack, HTMLStencilElement {
    }
    var HTMLNkStackElement: {
        prototype: HTMLNkStackElement;
        new (): HTMLNkStackElement;
    };
    interface HTMLNkStepperItemElement extends Components.NkStepperItem, HTMLStencilElement {
    }
    var HTMLNkStepperItemElement: {
        prototype: HTMLNkStepperItemElement;
        new (): HTMLNkStepperItemElement;
    };
    interface HTMLNkStepperListElement extends Components.NkStepperList, HTMLStencilElement {
    }
    var HTMLNkStepperListElement: {
        prototype: HTMLNkStepperListElement;
        new (): HTMLNkStepperListElement;
    };
    interface HTMLNkTableItemElement extends Components.NkTableItem, HTMLStencilElement {
    }
    var HTMLNkTableItemElement: {
        prototype: HTMLNkTableItemElement;
        new (): HTMLNkTableItemElement;
    };
    interface HTMLNkTableListElement extends Components.NkTableList, HTMLStencilElement {
    }
    var HTMLNkTableListElement: {
        prototype: HTMLNkTableListElement;
        new (): HTMLNkTableListElement;
    };
    interface HTMLNkTagElement extends Components.NkTag, HTMLStencilElement {
    }
    var HTMLNkTagElement: {
        prototype: HTMLNkTagElement;
        new (): HTMLNkTagElement;
    };
    interface HTMLNkTagListElement extends Components.NkTagList, HTMLStencilElement {
    }
    var HTMLNkTagListElement: {
        prototype: HTMLNkTagListElement;
        new (): HTMLNkTagListElement;
    };
    interface HTMLNkTextInputElementEventMap {
        "valueChanged": string;
    }
    interface HTMLNkTextInputElement extends Components.NkTextInput, HTMLStencilElement {
        addEventListener<K extends keyof HTMLNkTextInputElementEventMap>(type: K, listener: (this: HTMLNkTextInputElement, ev: NkTextInputCustomEvent<HTMLNkTextInputElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLNkTextInputElementEventMap>(type: K, listener: (this: HTMLNkTextInputElement, ev: NkTextInputCustomEvent<HTMLNkTextInputElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLNkTextInputElement: {
        prototype: HTMLNkTextInputElement;
        new (): HTMLNkTextInputElement;
    };
    interface HTMLNkTextInputBaseElementEventMap {
        "valueChanged": string;
        "validChanged": { isValid: boolean; value: string | Date; message: string };
    }
    interface HTMLNkTextInputBaseElement extends Components.NkTextInputBase, HTMLStencilElement {
        addEventListener<K extends keyof HTMLNkTextInputBaseElementEventMap>(type: K, listener: (this: HTMLNkTextInputBaseElement, ev: NkTextInputBaseCustomEvent<HTMLNkTextInputBaseElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLNkTextInputBaseElementEventMap>(type: K, listener: (this: HTMLNkTextInputBaseElement, ev: NkTextInputBaseCustomEvent<HTMLNkTextInputBaseElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLNkTextInputBaseElement: {
        prototype: HTMLNkTextInputBaseElement;
        new (): HTMLNkTextInputBaseElement;
    };
    interface HTMLNkTextareaElementEventMap {
        "valueChanged": string;
    }
    interface HTMLNkTextareaElement extends Components.NkTextarea, HTMLStencilElement {
        addEventListener<K extends keyof HTMLNkTextareaElementEventMap>(type: K, listener: (this: HTMLNkTextareaElement, ev: NkTextareaCustomEvent<HTMLNkTextareaElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLNkTextareaElementEventMap>(type: K, listener: (this: HTMLNkTextareaElement, ev: NkTextareaCustomEvent<HTMLNkTextareaElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLNkTextareaElement: {
        prototype: HTMLNkTextareaElement;
        new (): HTMLNkTextareaElement;
    };
    interface HTMLNkTextareaBaseElementEventMap {
        "valueChanged": string;
    }
    interface HTMLNkTextareaBaseElement extends Components.NkTextareaBase, HTMLStencilElement {
        addEventListener<K extends keyof HTMLNkTextareaBaseElementEventMap>(type: K, listener: (this: HTMLNkTextareaBaseElement, ev: NkTextareaBaseCustomEvent<HTMLNkTextareaBaseElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLNkTextareaBaseElementEventMap>(type: K, listener: (this: HTMLNkTextareaBaseElement, ev: NkTextareaBaseCustomEvent<HTMLNkTextareaBaseElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLNkTextareaBaseElement: {
        prototype: HTMLNkTextareaBaseElement;
        new (): HTMLNkTextareaBaseElement;
    };
    interface HTMLNkUnstyledAnchorElement extends Components.NkUnstyledAnchor, HTMLStencilElement {
    }
    var HTMLNkUnstyledAnchorElement: {
        prototype: HTMLNkUnstyledAnchorElement;
        new (): HTMLNkUnstyledAnchorElement;
    };
    interface HTMLNkUnstyledButtonElement extends Components.NkUnstyledButton, HTMLStencilElement {
    }
    var HTMLNkUnstyledButtonElement: {
        prototype: HTMLNkUnstyledButtonElement;
        new (): HTMLNkUnstyledButtonElement;
    };
    interface HTMLElementTagNameMap {
        "nk-accordion": HTMLNkAccordionElement;
        "nk-accordion-list": HTMLNkAccordionListElement;
        "nk-alert": HTMLNkAlertElement;
        "nk-amount": HTMLNkAmountElement;
        "nk-assistive-text": HTMLNkAssistiveTextElement;
        "nk-avatar": HTMLNkAvatarElement;
        "nk-box": HTMLNkBoxElement;
        "nk-button-icon": HTMLNkButtonIconElement;
        "nk-button-nav": HTMLNkButtonNavElement;
        "nk-button-text": HTMLNkButtonTextElement;
        "nk-canvas-button": HTMLNkCanvasButtonElement;
        "nk-card-select": HTMLNkCardSelectElement;
        "nk-card-select-multi": HTMLNkCardSelectMultiElement;
        "nk-card-select-single": HTMLNkCardSelectSingleElement;
        "nk-card-standard": HTMLNkCardStandardElement;
        "nk-checkbox": HTMLNkCheckboxElement;
        "nk-checkbox-item": HTMLNkCheckboxItemElement;
        "nk-checkbox-list": HTMLNkCheckboxListElement;
        "nk-divider": HTMLNkDividerElement;
        "nk-email-input": HTMLNkEmailInputElement;
        "nk-field-base": HTMLNkFieldBaseElement;
        "nk-heading": HTMLNkHeadingElement;
        "nk-icon-system": HTMLNkIconSystemElement;
        "nk-image": HTMLNkImageElement;
        "nk-input-base": HTMLNkInputBaseElement;
        "nk-label": HTMLNkLabelElement;
        "nk-layout-split": HTMLNkLayoutSplitElement;
        "nk-list-unordered": HTMLNkListUnorderedElement;
        "nk-loader": HTMLNkLoaderElement;
        "nk-multi-select-card-list": HTMLNkMultiSelectCardListElement;
        "nk-number-input": HTMLNkNumberInputElement;
        "nk-paragraph": HTMLNkParagraphElement;
        "nk-pill": HTMLNkPillElement;
        "nk-pill-list": HTMLNkPillListElement;
        "nk-radio": HTMLNkRadioElement;
        "nk-radio-item": HTMLNkRadioItemElement;
        "nk-radio-list": HTMLNkRadioListElement;
        "nk-select-input": HTMLNkSelectInputElement;
        "nk-select-input-base": HTMLNkSelectInputBaseElement;
        "nk-single-select-card-list": HTMLNkSingleSelectCardListElement;
        "nk-stack": HTMLNkStackElement;
        "nk-stepper-item": HTMLNkStepperItemElement;
        "nk-stepper-list": HTMLNkStepperListElement;
        "nk-table-item": HTMLNkTableItemElement;
        "nk-table-list": HTMLNkTableListElement;
        "nk-tag": HTMLNkTagElement;
        "nk-tag-list": HTMLNkTagListElement;
        "nk-text-input": HTMLNkTextInputElement;
        "nk-text-input-base": HTMLNkTextInputBaseElement;
        "nk-textarea": HTMLNkTextareaElement;
        "nk-textarea-base": HTMLNkTextareaBaseElement;
        "nk-unstyled-anchor": HTMLNkUnstyledAnchorElement;
        "nk-unstyled-button": HTMLNkUnstyledButtonElement;
    }
}
declare namespace LocalJSX {
    interface NkAccordion {
        "isopen"?: boolean;
        /**
          * The title of the accordion item
         */
        "text"?: string;
        /**
          * The variant of the accordion item
         */
        "variant"?: AccordionItemVariant;
    }
    interface NkAccordionList {
    }
    interface NkAlert {
        /**
          * The text inside the button to the right
         */
        "buttonLabel"?: string;
        /**
          * The icon displayed to the left
         */
        "icon"?: string;
        "onButtonClicked"?: (event: NkAlertCustomEvent<MouseEvent>) => void;
        /**
          * The text displayed inside the alert
         */
        "text"?: string;
        /**
          * description
         */
        "variant"?: AlertVariant;
    }
    interface NkAmount {
        /**
          * Alignment of the label above
         */
        "alignment"?: AmountAlignment;
        /**
          * The price that is displayed
         */
        "price"?: string;
        /**
          * The rate that is displayed next to the price
         */
        "rate"?: string;
        /**
          * The text for the label above
         */
        "text"?: string;
        /**
          * Variant of the amount component
         */
        "variant"?: AmountVariant;
    }
    interface NkAssistiveText {
        /**
          * The label displayed inside of the div
         */
        "label"?: string;
        /**
          * The variant of the button, such as primary and secondary
         */
        "variant"?: AssistiveTextVariant;
    }
    interface NkAvatar {
        /**
          * The icon to be shown if no image src is provided or image loading fails
         */
        "iconName"?: string;
        /**
          * The source/path to the image shown in the avatar
         */
        "src"?: string;
    }
    interface NkBox {
        /**
          * The elevation variant
         */
        "variant"?: BoxVariant;
    }
    interface NkButtonIcon {
        /**
          * Is disabled
         */
        "disabled"?: boolean;
        /**
          * The icon displayed inside of the button
         */
        "icon"?: string;
        /**
          * The variant of the button, such as primary and secondary
         */
        "variant"?: ButtonVariant;
    }
    interface NkButtonNav {
        /**
          * Name of the icon to use
         */
        "iconname"?: string;
        /**
          * Text of the navigation button label
         */
        "label"?: string;
        /**
          * The variant of the navigation button
         */
        "variant"?: NavigationButtonVariant;
    }
    interface NkButtonText {
        /**
          * Is this button disabled?
         */
        "disabled"?: boolean;
        /**
          * The label displayed inside of the button and as a tooltip
         */
        "label"?: string;
        /**
          * icon preceding the label
         */
        "leadingicon"?: string;
        /**
          * icon following the label
         */
        "trailingicon"?: string;
        /**
          * The variant of the button, such as primary and secondary
         */
        "variant"?: ButtonVariant1;
    }
    interface NkCanvasButton {
        /**
          * Controls the horizontal alignment of the nested content
         */
        "alignment"?: CanvasButtonAlignment;
        /**
          * Determines if the button is disabled
         */
        "disabled"?: boolean;
        /**
          * Href for the link
         */
        "href"?: string;
        /**
          * Used to change the look of the canvas button, depending on whether it is active or not
         */
        "isactive"?: boolean;
        /**
          * The type of the canvas button
         */
        "type"?: CanvasButtonType;
        /**
          * Variant of the canvas button
         */
        "variant"?: CanvasButtonVariant;
    }
    interface NkCardSelect {
        /**
          * Label to the action at the bottom of the card
         */
        "actionlabel"?: string;
        /**
          * Title of the action at the bottom of the card
         */
        "actiontitle"?: string;
        /**
          * Value of the action
         */
        "actionvalue"?: boolean;
        /**
          * Unique id of the card
         */
        "cardid"?: string;
        /**
          * Alt text to the image
         */
        "imagealttext"?: string;
        /**
          * Url of the image
         */
        "imageurl"?: string;
        "onCardChanged"?: (event: NkCardSelectCustomEvent<boolean>) => void;
        /**
          * Variant of the card select
         */
        "variant"?: CardSelectVariant;
    }
    interface NkCardSelectMulti {
        /**
          * Label to the action at the bottom of the card
         */
        "actionlabel"?: string;
        /**
          * Title of the action at the bottom of the card
         */
        "actiontitle"?: string;
        /**
          * Value of the action
         */
        "actionvalue"?: boolean;
        /**
          * Unique id of the card
         */
        "cardid"?: string;
        /**
          * Alt text to the image
         */
        "imagealttext"?: string;
        /**
          * Url of the image
         */
        "imageurl"?: string;
        "onCardChanged"?: (event: NkCardSelectMultiCustomEvent<boolean>) => void;
        /**
          * Variant of the card select
         */
        "variant"?: CardSelectVariant1;
    }
    interface NkCardSelectSingle {
        /**
          * Label to the action at the bottom of the card
         */
        "actionlabel"?: string;
        /**
          * Title of the action at the bottom of the card
         */
        "actiontitle"?: string;
        /**
          * Value of the action
         */
        "actionvalue"?: boolean;
        /**
          * Unique id of the card
         */
        "cardid"?: string;
        /**
          * Alt text to the image
         */
        "imagealttext"?: string;
        /**
          * Url of the image
         */
        "imageurl"?: string;
        "onCardChanged"?: (event: NkCardSelectSingleCustomEvent<boolean>) => void;
        /**
          * Variant of the card select
         */
        "variant"?: CardSelectVariant1;
    }
    interface NkCardStandard {
        "imagealttext"?: string;
        /**
          * The image URL of the card
         */
        "imageurl"?: string;
        /**
          * The card variant
         */
        "variant"?: CardVariant;
    }
    interface NkCheckbox {
        /**
          * Is this checkbox disabled?
         */
        "disabled"?: boolean;
        /**
          * boolean to tell if input should be displayed in DOM or not
         */
        "hideinput"?: boolean;
        "onValueChanged"?: (event: NkCheckboxCustomEvent<boolean>) => void;
        /**
          * The value of the checkbox. True if checked, false if unchecked.
         */
        "value"?: boolean;
    }
    interface NkCheckboxItem {
        /**
          * Is this checkbox disabled?
         */
        "disabled"?: boolean;
        /**
          * Boolean to tell if input should be displayed in DOM or not
         */
        "hideinput"?: boolean;
        /**
          * Label of the checkbox
         */
        "label"?: string;
        "onValueChanged"?: (event: NkCheckboxItemCustomEvent<boolean>) => void;
        /**
          * The emphasized text above the label
         */
        "titlelabel"?: string;
        /**
          * The value of the checkbox. True if checked, false if unchecked.
         */
        "value"?: boolean;
        /**
          * The variant of the checkbox
         */
        "variant"?: CheckboxDetailedVariant;
    }
    interface NkCheckboxList {
        /**
          * Field label
         */
        "label"?: string;
        "onValuesChanged"?: (event: NkCheckboxListCustomEvent<string[]>) => void;
        /**
          * available options
         */
        "options"?: CheckboxDetailedProps[];
        /**
          * Orientation of the checkbox list. Defaults to vertical
         */
        "orientation"?: Orientation;
        /**
          * selected keys
         */
        "values"?: string[];
        /**
          * Checkbox variant. Should we show the list as pills or checkboxes?
         */
        "variant"?: CheckboxDetailedListVariant;
    }
    interface NkDivider {
        "orientation"?: Orientation;
    }
    interface NkEmailInput {
        /**
          * The label shown above the input field
         */
        "label"?: string;
        /**
          * Custom label to display under input
         */
        "labelassistive"?: string | null;
        /**
          * Max length of the input string
         */
        "maxLength"?: string;
        "onValueChanged"?: (event: NkEmailInputCustomEvent<string>) => void;
        /**
          * The value of the input
         */
        "value"?: string;
        /**
          * The variant of the fieldBase element
         */
        "variant"?: FieldBaseVariant;
        /**
          * Width of the field in 'ch'
         */
        "width"?: number;
    }
    interface NkFieldBase {
        /**
          * Determines if the label should be raised
         */
        "hasValue"?: boolean;
        /**
          * The label to render. This should be descriptive of the field
         */
        "label"?: string;
        /**
          * Assistive label which is placed below the component
         */
        "labelassistive"?: string;
        /**
          * The variant of the fieldBase element
         */
        "variant"?: FieldBaseVariant1;
        /**
          * Width of the component in "ch"
         */
        "width"?: number;
    }
    interface NkHeading {
        /**
          * Text alignment for the header
         */
        "alignment"?: HeadingAlignment;
        /**
          * Header level. Use appropriate level according to the global header outline
         */
        "level"?: number;
        /**
          * The text to show in the heading
         */
        "text"?: string;
        /**
          * Determines the header variant
         */
        "variant"?: HeadingVariant;
    }
    interface NkIconSystem {
        /**
          * The name of the icon, e.g. 'add', 'remove', 'lock'
         */
        "name"?: string;
        /**
          * The size category of the icon
         */
        "size"?: IconSize;
        /**
          * Icon variant determining color and size
         */
        "variant"?: string;
    }
    interface NkImage {
        /**
          * The `alt` text of the image
         */
        "alt"?: string;
        /**
          * The image URL of the card
         */
        "url"?: string;
        /**
          * Variant of the image
         */
        "variant"?: ImageVariant;
    }
    interface NkInputBase {
        /**
          * Determines if the label should be raised
         */
        "hasValue"?: boolean;
        /**
          * The label to render. This should be descriptive of the field
         */
        "label"?: string;
        /**
          * Assistive label which is placed below the input box
         */
        "labelassistive"?: string;
        /**
          * Component state. Useful for signaling errors
         */
        "state"?: InputBaseState;
        /**
          * The variant of the fieldBase element
         */
        "variant"?: InputBaseVariant;
        /**
          * Width of the input field in "ch"
         */
        "width"?: number;
    }
    interface NkLabel {
        /**
          * The text of the label
         */
        "text"?: string;
        /**
          * The label variant
         */
        "variant"?: LabelVariant;
    }
    interface NkLayoutSplit {
    }
    interface NkListUnordered {
    }
    interface NkLoader {
        /**
          * How far the loading is
         */
        "percentage"?: number;
        /**
          * Text displayed below the loading bar
         */
        "text"?: string;
    }
    interface NkMultiSelectCardList {
        "onCardChanged"?: (event: NkMultiSelectCardListCustomEvent<string[]>) => void;
        /**
          * selected cards containing their cardid
         */
        "values"?: string[];
    }
    interface NkNumberInput {
        /**
          * Determines if the text field is read only
         */
        "disabled"?: boolean;
        /**
          * The label shown above the input field
         */
        "label"?: string;
        /**
          * Maximum numerical value
         */
        "max"?: string;
        /**
          * Max length of the input string
         */
        "maxLength"?: string;
        /**
          * Minimum numerical value
         */
        "min"?: string;
        "onValueChanged"?: (event: NkNumberInputCustomEvent<number>) => void;
        /**
          * The value in the input field
         */
        "value"?: number | null;
        /**
          * The variant of the fieldBase element
         */
        "variant"?: FieldBaseVariant;
        /**
          * Width of the field in 'ch'
         */
        "width"?: number;
    }
    interface NkParagraph {
        /**
          * Text alignment for the paragraph
         */
        "alignment"?: Alignment;
        /**
          * The text to display in the paragraph.
         */
        "text"?: string;
        /**
          * Allows for direct HTML injection
         */
        "unsafe"?: boolean;
        /**
          * The paragraph variant
         */
        "variant"?: ParagraphVariant;
    }
    interface NkPill {
        /**
          * Is this pill disabled?
         */
        "disabled"?: boolean;
        "icon"?: string;
        "label"?: string;
        "onPillChange"?: (event: NkPillCustomEvent<boolean>) => void;
        /**
          * Is checked
         */
        "value"?: boolean;
    }
    interface NkPillList {
        "onPillChange"?: (event: NkPillListCustomEvent<string[]>) => void;
        "options"?: PillOption[];
        "values"?: string[];
    }
    interface NkRadio {
        /**
          * Is the radiobutton disabled?
         */
        "disabled"?: boolean;
        /**
          * Boolean to tell if input should be displayed in DOM or not
         */
        "hideinput"?: boolean;
        /**
          * Name of the radiobutton
         */
        "name"?: string;
        "onValueChanged"?: (event: NkRadioCustomEvent<boolean>) => void;
        /**
          * The value of the radiobutton. True if checked, false in unchecked
         */
        "value"?: boolean;
    }
    interface NkRadioItem {
        /**
          * The id of the radiobutton
         */
        "buttonid"?: string;
        /**
          * Determines if the radio button is disabled
         */
        "disabled"?: boolean;
        /**
          * Boolean to tell if input should be displayed in DOM or not
         */
        "hideinput"?: boolean;
        /**
          * The label shown next to the radio button
         */
        "label"?: string;
        /**
          * Name of the radiobutton
         */
        "name"?: string;
        "onValueChanged"?: (event: NkRadioItemCustomEvent<boolean>) => void;
        /**
          * The emphasized text above the label
         */
        "titlelabel"?: string;
        /**
          * The value of the radio button
         */
        "value"?: boolean;
        /**
          * The variant of the radiobutton with label component
         */
        "variant"?: RadioDetailedVariant;
    }
    interface NkRadioList {
        /**
          * The name of the radiobutton group
         */
        "groupname"?: string;
        /**
          * The label to show above the list of radiobuttons
         */
        "label"?: string;
        "onValueChanged"?: (event: NkRadioListCustomEvent<string>) => void;
        /**
          * Orientation of the radio button list. Defaults to vertical
         */
        "orientation"?: Orientation;
        "radiobuttons"?: RadioButtonWithLabelProps[];
        /**
          * The id of the currently chosen radiobutton
         */
        "value"?: string;
    }
    interface NkSelectInput {
        /**
          * Label to be displayed above the select
         */
        "label"?: string;
        "onValueChanged"?: (event: NkSelectInputCustomEvent<string | number>) => void;
        /**
          * Possible options to select from
         */
        "options"?: SelectInputValue[];
        /**
          * The selected value. This should match the value of an object in Options
         */
        "value"?: string | number;
        /**
          * The variant of the fieldBase element
         */
        "variant"?: FieldBaseVariant;
        /**
          * Width of the field in 'ch'
         */
        "width"?: number;
    }
    interface NkSelectInputBase {
        "onValueChanged"?: (event: NkSelectInputBaseCustomEvent<string>) => void;
        /**
          * Allowed values
         */
        "options"?: SelectInputValue1[];
        /**
          * Value of the select input
         */
        "value"?: string | null;
    }
    interface NkSingleSelectCardList {
        "onCardChanged"?: (event: NkSingleSelectCardListCustomEvent<string>) => void;
        /**
          * Selected cardid
         */
        "value"?: string;
    }
    interface NkStack {
        /**
          * Dictates the aligment of the stack
         */
        "alignment"?: Alignment1;
        /**
          * Dictates justification of the stack items
         */
        "justification"?: Justification;
        /**
          * Dictates the orientation of the stack
         */
        "orientation"?: Orientation;
        /**
          * Dictates the spacing and contextual use of the stack
         */
        "variant"?: StackVariant;
        /**
          * Disable wrap
         */
        "wrap"?: Wrap;
    }
    interface NkStepperItem {
        /**
          * Icon of the bar
         */
        "icon"?: string;
        /**
          * If bar is active
         */
        "isactive"?: boolean;
        /**
          * If bar is completed
         */
        "iscompleted"?: boolean;
        /**
          * Is it the last item in the steps
         */
        "islastitem"?: boolean;
        /**
          * Label used for title on bar
         */
        "label"?: string;
        /**
          * Id of the item
         */
        "stepperId"?: string;
    }
    interface NkStepperList {
        /**
          * The current step of the steps
         */
        "currentstep"?: string;
        /**
          * List of steps
         */
        "steps"?: StepProps[];
    }
    interface NkTableItem {
        /**
          * The label displayed to the left
         */
        "label"?: string;
        /**
          * The value displayed to the right
         */
        "value"?: string;
        /**
          * Variant of the item
         */
        "variant"?: DataDefinitionItemVariant;
    }
    interface NkTableList {
    }
    interface NkTag {
        /**
          * Optional icon name
         */
        "icon"?: string;
        /**
          * The text that is displayed
         */
        "text"?: string;
    }
    interface NkTagList {
        /**
          * List of tags
         */
        "tags"?: TagProps[];
        /**
          * Variant of the tag stack
         */
        "variant"?: Orientation;
    }
    interface NkTextInput {
        /**
          * Custom error message
         */
        "customerrormessage"?: string;
        /**
          * Determines if the text field is read only
         */
        "disabled"?: boolean;
        /**
          * Determines if the text input is used a search input. If true it will show a search icon
         */
        "issearchable"?: boolean;
        /**
          * The label shown above the input field
         */
        "label"?: string;
        /**
          * Max length of the input string
         */
        "maxLength"?: string;
        "onValueChanged"?: (event: NkTextInputCustomEvent<string>) => void;
        /**
          * Regex pattern for HTML5 validation
         */
        "pattern"?: string;
        /**
          * Required
         */
        "required"?: boolean;
        /**
          * The value of the input field
         */
        "value"?: string;
        /**
          * The variant of the fieldBase element
         */
        "variant"?: FieldBaseVariant;
        /**
          * Width of the field in 'ch'
         */
        "width"?: number;
    }
    interface NkTextInputBase {
        /**
          * Custom error message
         */
        "customerrormessage"?: string;
        /**
          * Disables input if true.
         */
        "disabled"?: boolean;
        "inputMode"?: string;
        /**
          * Maximum value of the input
         */
        "max"?: string;
        /**
          * Maximum allowed length of the input string
         */
        "maxLength"?: string;
        /**
          * Minimum value of the input
         */
        "min"?: string;
        "onValidChanged"?: (event: NkTextInputBaseCustomEvent<{ isValid: boolean; value: string | Date; message: string }>) => void;
        "onValueChanged"?: (event: NkTextInputBaseCustomEvent<string>) => void;
        /**
          * Regex pattern for HTML5 validation
         */
        "pattern"?: string;
        /**
          * Required
         */
        "required"?: boolean;
        /**
          * The type of the HTMLInputField
         */
        "type"?: InputElementType;
        /**
          * The value of the input field
         */
        "value"?: string | Date | null;
    }
    interface NkTextarea {
        /**
          * Disables input if true.
         */
        "disabled"?: boolean;
        /**
          * Description of this property
         */
        "label"?: string;
        /**
          * Maximum length of the value string
         */
        "maxLength"?: string;
        "onValueChanged"?: (event: NkTextareaCustomEvent<string>) => void;
        "placeholderText"?: string;
        /**
          * The text value within the textarea
         */
        "value"?: string;
        /**
          * The variant of the fieldBase element
         */
        "variant"?: FieldBaseVariant;
    }
    interface NkTextareaBase {
        /**
          * Disables input if true.
         */
        "disabled"?: boolean;
        /**
          * Max length of the value string
         */
        "maxLength"?: string;
        "onValueChanged"?: (event: NkTextareaBaseCustomEvent<string>) => void;
        "placeholderText"?: string;
        /**
          * Text value of the textarea
         */
        "value"?: string;
    }
    interface NkUnstyledAnchor {
        /**
          * href
         */
        "href"?: string;
        /**
          * Determine if the anchor is an inline element or block;
         */
        "inline"?: boolean;
        /**
          * target
         */
        "target"?: 'blank' | undefined;
    }
    interface NkUnstyledButton {
        "inline"?: boolean;
    }
    interface IntrinsicElements {
        "nk-accordion": NkAccordion;
        "nk-accordion-list": NkAccordionList;
        "nk-alert": NkAlert;
        "nk-amount": NkAmount;
        "nk-assistive-text": NkAssistiveText;
        "nk-avatar": NkAvatar;
        "nk-box": NkBox;
        "nk-button-icon": NkButtonIcon;
        "nk-button-nav": NkButtonNav;
        "nk-button-text": NkButtonText;
        "nk-canvas-button": NkCanvasButton;
        "nk-card-select": NkCardSelect;
        "nk-card-select-multi": NkCardSelectMulti;
        "nk-card-select-single": NkCardSelectSingle;
        "nk-card-standard": NkCardStandard;
        "nk-checkbox": NkCheckbox;
        "nk-checkbox-item": NkCheckboxItem;
        "nk-checkbox-list": NkCheckboxList;
        "nk-divider": NkDivider;
        "nk-email-input": NkEmailInput;
        "nk-field-base": NkFieldBase;
        "nk-heading": NkHeading;
        "nk-icon-system": NkIconSystem;
        "nk-image": NkImage;
        "nk-input-base": NkInputBase;
        "nk-label": NkLabel;
        "nk-layout-split": NkLayoutSplit;
        "nk-list-unordered": NkListUnordered;
        "nk-loader": NkLoader;
        "nk-multi-select-card-list": NkMultiSelectCardList;
        "nk-number-input": NkNumberInput;
        "nk-paragraph": NkParagraph;
        "nk-pill": NkPill;
        "nk-pill-list": NkPillList;
        "nk-radio": NkRadio;
        "nk-radio-item": NkRadioItem;
        "nk-radio-list": NkRadioList;
        "nk-select-input": NkSelectInput;
        "nk-select-input-base": NkSelectInputBase;
        "nk-single-select-card-list": NkSingleSelectCardList;
        "nk-stack": NkStack;
        "nk-stepper-item": NkStepperItem;
        "nk-stepper-list": NkStepperList;
        "nk-table-item": NkTableItem;
        "nk-table-list": NkTableList;
        "nk-tag": NkTag;
        "nk-tag-list": NkTagList;
        "nk-text-input": NkTextInput;
        "nk-text-input-base": NkTextInputBase;
        "nk-textarea": NkTextarea;
        "nk-textarea-base": NkTextareaBase;
        "nk-unstyled-anchor": NkUnstyledAnchor;
        "nk-unstyled-button": NkUnstyledButton;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "nk-accordion": LocalJSX.NkAccordion & JSXBase.HTMLAttributes<HTMLNkAccordionElement>;
            "nk-accordion-list": LocalJSX.NkAccordionList & JSXBase.HTMLAttributes<HTMLNkAccordionListElement>;
            "nk-alert": LocalJSX.NkAlert & JSXBase.HTMLAttributes<HTMLNkAlertElement>;
            "nk-amount": LocalJSX.NkAmount & JSXBase.HTMLAttributes<HTMLNkAmountElement>;
            "nk-assistive-text": LocalJSX.NkAssistiveText & JSXBase.HTMLAttributes<HTMLNkAssistiveTextElement>;
            "nk-avatar": LocalJSX.NkAvatar & JSXBase.HTMLAttributes<HTMLNkAvatarElement>;
            "nk-box": LocalJSX.NkBox & JSXBase.HTMLAttributes<HTMLNkBoxElement>;
            "nk-button-icon": LocalJSX.NkButtonIcon & JSXBase.HTMLAttributes<HTMLNkButtonIconElement>;
            "nk-button-nav": LocalJSX.NkButtonNav & JSXBase.HTMLAttributes<HTMLNkButtonNavElement>;
            "nk-button-text": LocalJSX.NkButtonText & JSXBase.HTMLAttributes<HTMLNkButtonTextElement>;
            "nk-canvas-button": LocalJSX.NkCanvasButton & JSXBase.HTMLAttributes<HTMLNkCanvasButtonElement>;
            "nk-card-select": LocalJSX.NkCardSelect & JSXBase.HTMLAttributes<HTMLNkCardSelectElement>;
            "nk-card-select-multi": LocalJSX.NkCardSelectMulti & JSXBase.HTMLAttributes<HTMLNkCardSelectMultiElement>;
            "nk-card-select-single": LocalJSX.NkCardSelectSingle & JSXBase.HTMLAttributes<HTMLNkCardSelectSingleElement>;
            "nk-card-standard": LocalJSX.NkCardStandard & JSXBase.HTMLAttributes<HTMLNkCardStandardElement>;
            "nk-checkbox": LocalJSX.NkCheckbox & JSXBase.HTMLAttributes<HTMLNkCheckboxElement>;
            "nk-checkbox-item": LocalJSX.NkCheckboxItem & JSXBase.HTMLAttributes<HTMLNkCheckboxItemElement>;
            "nk-checkbox-list": LocalJSX.NkCheckboxList & JSXBase.HTMLAttributes<HTMLNkCheckboxListElement>;
            "nk-divider": LocalJSX.NkDivider & JSXBase.HTMLAttributes<HTMLNkDividerElement>;
            "nk-email-input": LocalJSX.NkEmailInput & JSXBase.HTMLAttributes<HTMLNkEmailInputElement>;
            "nk-field-base": LocalJSX.NkFieldBase & JSXBase.HTMLAttributes<HTMLNkFieldBaseElement>;
            "nk-heading": LocalJSX.NkHeading & JSXBase.HTMLAttributes<HTMLNkHeadingElement>;
            "nk-icon-system": LocalJSX.NkIconSystem & JSXBase.HTMLAttributes<HTMLNkIconSystemElement>;
            "nk-image": LocalJSX.NkImage & JSXBase.HTMLAttributes<HTMLNkImageElement>;
            "nk-input-base": LocalJSX.NkInputBase & JSXBase.HTMLAttributes<HTMLNkInputBaseElement>;
            "nk-label": LocalJSX.NkLabel & JSXBase.HTMLAttributes<HTMLNkLabelElement>;
            "nk-layout-split": LocalJSX.NkLayoutSplit & JSXBase.HTMLAttributes<HTMLNkLayoutSplitElement>;
            "nk-list-unordered": LocalJSX.NkListUnordered & JSXBase.HTMLAttributes<HTMLNkListUnorderedElement>;
            "nk-loader": LocalJSX.NkLoader & JSXBase.HTMLAttributes<HTMLNkLoaderElement>;
            "nk-multi-select-card-list": LocalJSX.NkMultiSelectCardList & JSXBase.HTMLAttributes<HTMLNkMultiSelectCardListElement>;
            "nk-number-input": LocalJSX.NkNumberInput & JSXBase.HTMLAttributes<HTMLNkNumberInputElement>;
            "nk-paragraph": LocalJSX.NkParagraph & JSXBase.HTMLAttributes<HTMLNkParagraphElement>;
            "nk-pill": LocalJSX.NkPill & JSXBase.HTMLAttributes<HTMLNkPillElement>;
            "nk-pill-list": LocalJSX.NkPillList & JSXBase.HTMLAttributes<HTMLNkPillListElement>;
            "nk-radio": LocalJSX.NkRadio & JSXBase.HTMLAttributes<HTMLNkRadioElement>;
            "nk-radio-item": LocalJSX.NkRadioItem & JSXBase.HTMLAttributes<HTMLNkRadioItemElement>;
            "nk-radio-list": LocalJSX.NkRadioList & JSXBase.HTMLAttributes<HTMLNkRadioListElement>;
            "nk-select-input": LocalJSX.NkSelectInput & JSXBase.HTMLAttributes<HTMLNkSelectInputElement>;
            "nk-select-input-base": LocalJSX.NkSelectInputBase & JSXBase.HTMLAttributes<HTMLNkSelectInputBaseElement>;
            "nk-single-select-card-list": LocalJSX.NkSingleSelectCardList & JSXBase.HTMLAttributes<HTMLNkSingleSelectCardListElement>;
            "nk-stack": LocalJSX.NkStack & JSXBase.HTMLAttributes<HTMLNkStackElement>;
            "nk-stepper-item": LocalJSX.NkStepperItem & JSXBase.HTMLAttributes<HTMLNkStepperItemElement>;
            "nk-stepper-list": LocalJSX.NkStepperList & JSXBase.HTMLAttributes<HTMLNkStepperListElement>;
            "nk-table-item": LocalJSX.NkTableItem & JSXBase.HTMLAttributes<HTMLNkTableItemElement>;
            "nk-table-list": LocalJSX.NkTableList & JSXBase.HTMLAttributes<HTMLNkTableListElement>;
            "nk-tag": LocalJSX.NkTag & JSXBase.HTMLAttributes<HTMLNkTagElement>;
            "nk-tag-list": LocalJSX.NkTagList & JSXBase.HTMLAttributes<HTMLNkTagListElement>;
            "nk-text-input": LocalJSX.NkTextInput & JSXBase.HTMLAttributes<HTMLNkTextInputElement>;
            "nk-text-input-base": LocalJSX.NkTextInputBase & JSXBase.HTMLAttributes<HTMLNkTextInputBaseElement>;
            "nk-textarea": LocalJSX.NkTextarea & JSXBase.HTMLAttributes<HTMLNkTextareaElement>;
            "nk-textarea-base": LocalJSX.NkTextareaBase & JSXBase.HTMLAttributes<HTMLNkTextareaBaseElement>;
            "nk-unstyled-anchor": LocalJSX.NkUnstyledAnchor & JSXBase.HTMLAttributes<HTMLNkUnstyledAnchorElement>;
            "nk-unstyled-button": LocalJSX.NkUnstyledButton & JSXBase.HTMLAttributes<HTMLNkUnstyledButtonElement>;
        }
    }
}
